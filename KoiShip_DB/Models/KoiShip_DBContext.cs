// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace KoiShip_DB.Data.Models;

public partial class KoiShip_DBContext : DbContext
{
    public KoiShip_DBContext()
    {
    }

    public KoiShip_DBContext(DbContextOptions<KoiShip_DBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<KoiFish> KoiFishes { get; set; }

    public virtual DbSet<Pricing> Pricings { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<ShipMent> ShipMents { get; set; }

    public virtual DbSet<ShippingOrder> ShippingOrders { get; set; }

    public virtual DbSet<ShippingOrderDetail> ShippingOrderDetails { get; set; }

    public virtual DbSet<User> Users { get; set; }
    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));

    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=LAPTOP-0IG46BD1\\SQLEXPRESS;Initial Catalog=KoiShip_DB;User ID=sa;Password=12345;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Category__3214EC07107C890E");

            entity.ToTable("Category");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UrlImg).HasColumnName("Url_IMG");
        });

        modelBuilder.Entity<KoiFish>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__koiFish__3214EC0727B74D57");

            entity.ToTable("koiFish");

            entity.Property(e => e.CategoryId).HasColumnName("Category_Id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UrlImg).HasColumnName("Url_IMG");
            entity.Property(e => e.UserId).HasColumnName("User_Id");

            entity.HasOne(d => d.Category).WithMany(p => p.KoiFishes)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__koiFish__Categor__412EB0B6");

            entity.HasOne(d => d.User).WithMany(p => p.KoiFishes)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__koiFish__User_Id__403A8C7D");
        });

        modelBuilder.Entity<Pricing>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Pricing__3214EC071745AD06");

            entity.ToTable("Pricing");

            entity.Property(e => e.Currency).IsRequired();
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.ShippingMethod)
                .IsRequired()
                .HasColumnName("shipping_method");
            entity.Property(e => e.WeightRange)
                .IsRequired()
                .HasColumnName("weight_range");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Role__3214EC07D2AE8823");

            entity.ToTable("Role");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ShipMent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ShipMent__3214EC0713532F0E");

            entity.ToTable("ShipMent");

            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("End_Date");
            entity.Property(e => e.HealthCheck)
                .IsRequired()
                .HasColumnName("health_check");
            entity.Property(e => e.ShippingOrdersId).HasColumnName("ShippingOrders_Id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("Start_Date");
            entity.Property(e => e.UserId).HasColumnName("User_Id");
            entity.Property(e => e.Vehicle)
                .IsRequired()
                .HasColumnName("vehicle");

            entity.HasOne(d => d.ShippingOrders).WithMany(p => p.ShipMents)
                .HasForeignKey(d => d.ShippingOrdersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ShipMent__Shippi__4BAC3F29");

            entity.HasOne(d => d.User).WithMany(p => p.ShipMents)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ShipMent__User_I__4CA06362");
        });

        modelBuilder.Entity<ShippingOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Shipping__3214EC0735519EEA");

            entity.Property(e => e.AdressTo)
                .IsRequired()
                .HasColumnName("Adress_To");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.PhoneNumber).IsRequired();
            entity.Property(e => e.PricingId).HasColumnName("Pricing_Id");
            entity.Property(e => e.TotalPrice).HasColumnName("Total_Price");
            entity.Property(e => e.UserId).HasColumnName("User_Id");

            entity.HasOne(d => d.Pricing).WithMany(p => p.ShippingOrders)
                .HasForeignKey(d => d.PricingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ShippingO__Prici__44FF419A");

            entity.HasOne(d => d.User).WithMany(p => p.ShippingOrders)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ShippingO__User___440B1D61");
        });

        modelBuilder.Entity<ShippingOrderDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Shipping__3214EC071A2BDCFD");

            entity.Property(e => e.KoiFishId).HasColumnName("KoiFish_Id");
            entity.Property(e => e.ShippingOrdersId).HasColumnName("ShippingOrders_Id");

            entity.HasOne(d => d.KoiFish).WithMany(p => p.ShippingOrderDetails)
                .HasForeignKey(d => d.KoiFishId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ShippingO__KoiFi__47DBAE45");

            entity.HasOne(d => d.ShippingOrders).WithMany(p => p.ShippingOrderDetails)
                .HasForeignKey(d => d.ShippingOrdersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ShippingO__Shipp__48CFD27E");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__User__3214EC07E44A1DD4");

            entity.ToTable("User");

            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Gender)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ImgUrl)
                .IsRequired()
                .HasColumnName("ImgURL");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Phone_Number");
            entity.Property(e => e.RoleId).HasColumnName("Role_Id");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__User__Role_Id__398D8EEE");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}